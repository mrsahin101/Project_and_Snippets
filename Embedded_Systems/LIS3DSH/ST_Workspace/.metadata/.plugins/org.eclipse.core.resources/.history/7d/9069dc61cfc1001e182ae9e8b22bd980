/* USER CODE BEGIN Header */
/**
  ******************************************************************************
  * @file           : main.c
  * @brief          : Main program body
  ******************************************************************************
  * @attention
  *
  * Copyright (c) 2024 STMicroelectronics.
  * All rights reserved.
  *
  * This software is licensed under terms that can be found in the LICENSE file
  * in the root directory of this software component.
  * If no LICENSE file comes with this software, it is provided AS-IS.
  *
  ******************************************************************************
  */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */

/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */

/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
typedef enum __bool
{
	FALSE = 0,
	TRUE = 1,
}bool;
typedef struct __lis3dsh
{
	uint8_t temperature;
	uint16_t X_Axis;
	uint16_t Y_Axis;
	uint16_t Z_Axis;
}LIS3DSH_t;
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */

/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
SPI_HandleTypeDef hspi1;

/* USER CODE BEGIN PV */
uint8_t TxData[1] = {0x8F};
uint8_t RxData[1] = {0x00};
LIS3DSH_t LIS3DSH_Data;
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_SPI1_Init(void);
/* USER CODE BEGIN PFP */

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
#define LIS3DSH_REG_ADR_INFO1				0x0D
#define LIS3DSH_REG_ADR_INFO2				0x0E
#define LIS3DSH_REG_ADR_WHO_AM_I			0x0F

#define LIS3DSH_REG_VAL_INFO1				0x21
#define LIS3DSH_REG_VAL_INFO2				0x00
#define LIS3DSH_REG_VAL_WHO_AM_I			0x3F

#define LIS3DSH_REG_ADR_OUT_TEMPERATURE		0x0C
#define LIS3DSH_REG_ADR_CTRL_REG4			0x20

#define LIS3DSH_REG_ADR_OUT_X_LOW_BYTE		0x28
#define LIS3DSH_REG_ADR_OUT_X_HIGH_BYTE		0x29

#define LIS3DSH_REG_ADR_CTRL_REG5			0x24

#define LIS3DSH_REG_ADR_OUT_Y_LOW_BYTE		0x2A
#define LIS3DSH_REG_ADR_OUT_Y_HIGH_BYTE		0x2B

#define LIS3DSH_REG_ADR_OUT_Z_LOW_BYTE		0x2C
#define LIS3DSH_REG_ADR_OUT_Z_HIGH_BYTE		0x2D

void readRegister(uint8_t registerAddress, uint8_t *readBuffer, uint8_t readByteCount)
{
	uint8_t readAddres = registerAddress + 0x80;
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
	HAL_SPI_Transmit(&hspi1, (uint8_t *)&readAddres, 1, 1);
	HAL_SPI_Receive(&hspi1, (uint8_t *)readBuffer, readByteCount, 1);
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);
}
void writeRegister(uint8_t registerAddress, uint8_t *data, uint8_t dataCount)
{
	if(dataCount == 1)
	{
		uint8_t writeAdress = registerAddress;
		uint8_t readedData[0] = {0x00};
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_RESET);
		HAL_SPI_Transmit(&hspi1, (uint8_t *)&writeAdress, 1, 1);
		HAL_SPI_Transmit(&hspi1, (uint8_t *)data, dataCount, 1);
		HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);

		readRegister(registerAddress, &RxData[0], 1);

	}
}
void enableALLAxis()
{
	uint8_t data = 0x17;
	writeRegister(LIS3DSH_REG_ADR_CTRL_REG4, &data, 1);
}
bool LIS3DSH_Init()
{
	uint8_t readedData[1] = {0x00};
	bool status = FALSE;
	while(status != TRUE)
	{
		readRegister(LIS3DSH_REG_ADR_WHO_AM_I, &readedData[0], 1);
		if(readedData[0] != LIS3DSH_REG_VAL_WHO_AM_I)
			status = FALSE;
		else
			status = TRUE;
		HAL_Delay(1);

		readRegister(LIS3DSH_REG_ADR_INFO1, &readedData[0], 1);
		if(readedData[0] != LIS3DSH_REG_VAL_INFO1)
			status = FALSE;
		else
			status = TRUE;
		HAL_Delay(1);

		readRegister(LIS3DSH_REG_ADR_INFO2, &readedData[0], 1);
		if(readedData[0] != LIS3DSH_REG_VAL_INFO2)
			status = FALSE;
		else
			status = TRUE;
		HAL_Delay(1);
	}
	return status;
}
void readTemperature()
{
	// Maybe doesnt work correctly
	// TODO : Check if it works correctly
	uint8_t readedData[1] = {0x00};
	readRegister(LIS3DSH_REG_ADR_OUT_TEMPERATURE, &readedData[0], 1);
	LIS3DSH_Data.temperature = readedData[0];
}
void readX_Axis()
{
	uint8_t readedData[1] = {0x00};
	LIS3DSH_Data.X_Axis = 0x0;

	readRegister(LIS3DSH_REG_ADR_OUT_X_LOW_BYTE, &readedData[0], 1);
	LIS3DSH_Data.X_Axis = readedData[0];

	readRegister(LIS3DSH_REG_ADR_OUT_X_HIGH_BYTE, &readedData[0], 1);
	LIS3DSH_Data.X_Axis = LIS3DSH_Data.X_Axis + (readedData[0] << 8);


}
void readY_Axis()
{
	uint8_t readedData[1] = {0x00};
	LIS3DSH_Data.Y_Axis = 0x0;

	readRegister(LIS3DSH_REG_ADR_OUT_Y_LOW_BYTE, &readedData[0], 1);
	LIS3DSH_Data.Y_Axis = readedData[0];

	readRegister(LIS3DSH_REG_ADR_OUT_Y_HIGH_BYTE, &readedData[0], 1);
	LIS3DSH_Data.Y_Axis = LIS3DSH_Data.Y_Axis + (readedData[0] << 8);


}
void readZ_Axis()
{
	uint8_t readedData[1] = {0x00};
	LIS3DSH_Data.Z_Axis = 0x0;

	readRegister(LIS3DSH_REG_ADR_OUT_Z_LOW_BYTE, &readedData[0], 1);
	LIS3DSH_Data.Z_Axis = readedData[0];

	readRegister(LIS3DSH_REG_ADR_OUT_Z_HIGH_BYTE, &readedData[0], 1);
	LIS3DSH_Data.Z_Axis = LIS3DSH_Data.Z_Axis + (readedData[0] << 8);


}
void setCTRL5()
{
	uint8_t data = 0x20;
	writeRegister(LIS3DSH_REG_ADR_CTRL_REG5, &data, 1);
}
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */

  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_SPI1_Init();
  /* USER CODE BEGIN 2 */
  HAL_Delay(1000);
  if(LIS3DSH_Init() == TRUE)
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_SET);
  else
	  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
  enableALLAxis();
  setCTRL5();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  readTemperature();
	  readX_Axis();
	  HAL_Delay(100);
//	  readRegister(LIS3DSH_REG_ADR_INFO1, &RxData[0], 1);
//	  HAL_Delay(5000);
//	  readRegister(LIS3DSH_REG_ADR_INFO2, &RxData[0], 1);
//	  HAL_Delay(5000);
//	  readRegister(LIS3DSH_REG_ADR_WHO_AM_I, &RxData[0], 1);
//	  HAL_Delay(5000);
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
  RCC_OscInitStruct.PLL.PLLM = 8;
  RCC_OscInitStruct.PLL.PLLN = 336;
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
  RCC_OscInitStruct.PLL.PLLQ = 7;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{

  /* USER CODE BEGIN SPI1_Init 0 */

  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
  hspi1.Init.Mode = SPI_MODE_MASTER;
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
  hspi1.Init.CLKPolarity = SPI_POLARITY_HIGH;
  hspi1.Init.CLKPhase = SPI_PHASE_2EDGE;
  hspi1.Init.NSS = SPI_NSS_SOFT;
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_256;
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
  hspi1.Init.CRCPolynomial = 10;
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
  __HAL_RCC_GPIOH_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_3, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);

  /*Configure GPIO pins : PD12 PD13 PD14 PD15 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}

/* USER CODE BEGIN 4 */

/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
  {
  }
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */
